# Implementing Revision History for JSON Configuration in Spring Boot with Oracle

To implement revision history for JSON configuration changes in a Spring Boot application with Oracle database, here's a comprehensive approach:

## 1. Database Design

First, design your Oracle tables to store both current configurations and their revision history:

```sql
-- Table for current configurations
CREATE TABLE metric_configurations (
    id NUMBER PRIMARY KEY,
    name VARCHAR2(255) NOT NULL,
    config_json CLOB NOT NULL,
    created_by VARCHAR2(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_by VARCHAR2(100),
    updated_at TIMESTAMP
);

-- Table for revision history
CREATE TABLE metric_configuration_audit (
    id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    config_id NUMBER NOT NULL,
    version NUMBER NOT NULL,
    config_json CLOB NOT NULL,
    changed_by VARCHAR2(100) NOT NULL,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    change_type VARCHAR2(20) NOT NULL, -- 'CREATE', 'UPDATE', 'DELETE'
    changed_fields CLOB, -- Stores which fields were modified
    FOREIGN KEY (config_id) REFERENCES metric_configurations(id)
);
```

## 2. Spring Boot Implementation

### Entity Classes

```java
@Entity
@Table(name = "metric_configurations")
public class MetricConfiguration {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    
    @Column(columnDefinition = "CLOB")
    @Convert(converter = JsonConverter.class)
    private JsonNode configJson;
    
    private String createdBy;
    private LocalDateTime createdAt;
    private String updatedBy;
    private LocalDateTime updatedAt;
    
    // Getters and setters
}

@Entity
@Table(name = "metric_configuration_audit")
public class MetricConfigurationAudit {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "config_id")
    private MetricConfiguration configuration;
    
    private Integer version;
    
    @Column(columnDefinition = "CLOB")
    @Convert(converter = JsonConverter.class)
    private JsonNode configJson;
    
    private String changedBy;
    private LocalDateTime changedAt;
    private String changeType;
    
    @Column(columnDefinition = "CLOB")
    @Convert(converter = JsonConverter.class)
    private JsonNode changedFields;
    
    // Getters and setters
}

// JSON converter class
@Converter
public class JsonConverter implements AttributeConverter<JsonNode, String> {
    private static final ObjectMapper objectMapper = new ObjectMapper();
    
    @Override
    public String convertToDatabaseColumn(JsonNode jsonNode) {
        try {
            return objectMapper.writeValueAsString(jsonNode);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Could not convert JSON to string", e);
        }
    }
    
    @Override
    public JsonNode convertToEntityAttribute(String jsonString) {
        try {
            return objectMapper.readTree(jsonString);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("Could not convert string to JSON", e);
        }
    }
}
```

### Repository Layer

```java
public interface MetricConfigurationRepository extends JpaRepository<MetricConfiguration, Long> {
}

public interface MetricConfigurationAuditRepository extends JpaRepository<MetricConfigurationAudit, Long> {
    List<MetricConfigurationAudit> findByConfigurationIdOrderByVersionDesc(Long configId);
}
```

### Service Layer

```java
@Service
@Transactional
public class MetricConfigurationService {
    
    private final MetricConfigurationRepository configRepository;
    private final MetricConfigurationAuditRepository auditRepository;
    private final ObjectMapper objectMapper;
    
    public MetricConfigurationService(MetricConfigurationRepository configRepository, 
                                    MetricConfigurationAuditRepository auditRepository,
                                    ObjectMapper objectMapper) {
        this.configRepository = configRepository;
        this.auditRepository = auditRepository;
        this.objectMapper = objectMapper;
    }
    
    public MetricConfiguration saveConfiguration(MetricConfiguration configuration, String username) {
        boolean isNew = configuration.getId() == null;
        
        if (isNew) {
            configuration.setCreatedBy(username);
            configuration.setCreatedAt(LocalDateTime.now());
        } else {
            configuration.setUpdatedBy(username);
            configuration.setUpdatedAt(LocalDateTime.now());
        }
        
        MetricConfiguration savedConfig = configRepository.save(configuration);
        
        // Create audit entry
        MetricConfigurationAudit audit = new MetricConfigurationAudit();
        audit.setConfiguration(savedConfig);
        audit.setConfigJson(savedConfig.getConfigJson());
        audit.setChangedBy(username);
        audit.setChangedAt(LocalDateTime.now());
        audit.setChangeType(isNew ? "CREATE" : "UPDATE");
        
        if (!isNew) {
            // Find previous version to compare changes
            Optional<MetricConfigurationAudit> lastAuditOpt = auditRepository
                .findTopByConfigurationIdOrderByVersionDesc(savedConfig.getId());
            
            if (lastAuditOpt.isPresent()) {
                JsonNode oldConfig = lastAuditOpt.get().getConfigJson();
                JsonNode newConfig = savedConfig.getConfigJson();
                
                JsonNode changes = findJsonChanges(oldConfig, newConfig);
                audit.setChangedFields(changes);
                audit.setVersion(lastAuditOpt.get().getVersion() + 1);
            } else {
                audit.setVersion(1);
            }
        } else {
            audit.setVersion(1);
        }
        
        auditRepository.save(audit);
        
        return savedConfig;
    }
    
    public List<MetricConfigurationAudit> getRevisionHistory(Long configId) {
        return auditRepository.findByConfigurationIdOrderByVersionDesc(configId);
    }
    
    public MetricConfiguration revertToVersion(Long configId, Long auditId, String username) {
        MetricConfigurationAudit audit = auditRepository.findById(auditId)
            .orElseThrow(() -> new RuntimeException("Audit entry not found"));
        
        MetricConfiguration config = configRepository.findById(configId)
            .orElseThrow(() -> new RuntimeException("Configuration not found"));
        
        config.setConfigJson(audit.getConfigJson());
        config.setUpdatedBy(username);
        config.setUpdatedAt(LocalDateTime.now());
        
        return saveConfiguration(config, username);
    }
    
    private JsonNode findJsonChanges(JsonNode oldJson, JsonNode newJson) {
        ObjectNode changes = objectMapper.createObjectNode();
        
        // Compare fields recursively
        compareJsonNodes("", oldJson, newJson, changes);
        
        return changes;
    }
    
    private void compareJsonNodes(String path, JsonNode oldNode, JsonNode newNode, ObjectNode changes) {
        if (oldNode.equals(newNode)) {
            return;
        }
        
        if (oldNode.isObject() && newNode.isObject()) {
            oldNode.fields().forEachRemaining(entry -> {
                String fieldPath = path.isEmpty() ? entry.getKey() : path + "." + entry.getKey();
                if (newNode.has(entry.getKey())) {
                    compareJsonNodes(fieldPath, entry.getValue(), newNode.get(entry.getKey()), changes);
                } else {
                    changes.put(fieldPath, "REMOVED");
                }
            });
            
            newNode.fields().forEachRemaining(entry -> {
                if (!oldNode.has(entry.getKey())) {
                    String fieldPath = path.isEmpty() ? entry.getKey() : path + "." + entry.getKey();
                    changes.put(fieldPath, "ADDED");
                }
            });
        } else if (oldNode.isArray() && newNode.isArray()) {
            if (oldNode.size() != newNode.size()) {
                changes.put(path + ".size", "Changed from " + oldNode.size() + " to " + newNode.size());
            }
            // More detailed array comparison could be added here
        } else {
            changes.put(path, "Changed from '" + oldNode.asText() + "' to '" + newNode.asText() + "'");
        }
    }
}
```

### Controller Layer

```java
@RestController
@RequestMapping("/api/configurations")
public class MetricConfigurationController {
    
    private final MetricConfigurationService configService;
    
    public MetricConfigurationController(MetricConfigurationService configService) {
        this.configService = configService;
    }
    
    @PostMapping
    public ResponseEntity<MetricConfiguration> saveConfiguration(
            @RequestBody MetricConfiguration configuration,
            @RequestHeader("X-Username") String username) {
        return ResponseEntity.ok(configService.saveConfiguration(configuration, username));
    }
    
    @GetMapping("/{id}/history")
    public ResponseEntity<List<MetricConfigurationAudit>> getRevisionHistory(@PathVariable Long id) {
        return ResponseEntity.ok(configService.getRevisionHistory(id));
    }
    
    @PostMapping("/{id}/revert/{auditId}")
    public ResponseEntity<MetricConfiguration> revertToVersion(
            @PathVariable Long id,
            @PathVariable Long auditId,
            @RequestHeader("X-Username") String username) {
        return ResponseEntity.ok(configService.revertToVersion(id, auditId, username));
    }
}
```

## 3. Frontend Integration

For the UI to display revision history:

1. Fetch the history when viewing a configuration:
```javascript
async function fetchRevisionHistory(configId) {
  const response = await fetch(`/api/configurations/${configId}/history`);
  return await response.json();
}
```

2. Display the changes in a user-friendly way:
```javascript
function renderChanges(changes) {
  if (!changes) return 'Initial version';
  
  const changeList = [];
  for (const [field, change] of Object.entries(changes)) {
    changeList.push(`<li><strong>${field}:</strong> ${change}</li>`);
  }
  
  return changeList.length ? `<ul>${changeList.join('')}</ul>` : 'No field changes detected';
}
```

3. Add a revert button for each historical version.

## 4. Additional Considerations

1. **Performance Optimization**:
   - For large JSON documents, consider storing only the diff between versions
   - Implement pagination for the revision history

2. **Security**:
   - Ensure proper authorization checks for configuration changes
   - Consider adding IP address logging for audit trails

3. **Advanced Features**:
   - Add comments/notes to each revision
   - Implement version tagging
   - Add comparison view between any two versions

4. **Alternative Approach**:
   - Consider using Hibernate Envers for automatic auditing if you're using JPA
   - For more complex requirements, look into Event Sourcing pattern

This implementation provides a complete solution for tracking changes to JSON configuration documents, storing the revision history in Oracle, and displaying it to users through a Spring Boot application.